renv::snapshot()
library(powerHDX)
library(dplyr)
library(mgcv)
library(stringr)
library(tidybayes)
library(rstan)
library(forcats)
library(brms)
library(rstanarm)
library(magrittr)
library(modelr)
library(ggdist)
library(ggplot2)
library(cowplot)
library(emmeans)
library(broom)
library(bayesplot)
library(MCMCglmm)
library(RColorBrewer)
library(withr)
library(rstantools)
install.packages("powerHDX")
if (!require(devtools)) {
install.packages('devtools')
}
devtools::install_github("hadexversum/powerHDX")
library(powerHDX)
devtools::install_github("hadexversum/powerHDX")
devtools::install_github("hadexversum/powerHDX")
renv::restored()
prepare_data = function(data){
data %>%
mutate(id = as.numeric(stringr::str_remove(id, " ")))
}
renv::restore()
renv::restore()
#------MODEL-------
?stan_model
ABC_stan<-stan_model(file="C:/Users/Magdalena/Documents/fixEf.stan")
?stan_model
library("rstan", lib.loc="C:/Users/Magdalena/Documents/mgr/magister/renv/library/R-4.0/x86_64-w64-mingw32")
options(mc.cores = parallel::detectCores())
options(mc.cores = parallel::detectCores())
ABC_stan<-rstan::stan_model(file="C:/Users/Magdalena/Documents/mgr/magister/fixEf.stan")
ABC_stan<-rstan::stan_model(file="C:/Users/Magdalena/Documents/mgr/magister/fixEf.stan")
options(mc.cores = parallel::detectCores())
file.exists("C:/Users/Magdalena/Documents/mgr/magister/fixEf.stan")
file.exists("C:/Users/Magdalena/Documents/mgr/magister/hdx_fixEf.stan")
ABC_stan<-rstan::stan_model(file="C:/Users/Magdalena/Documents/mgr/magister/fixEf.stan")
#------MODEL-------
remove("rstan")
library("rstan", lib.loc="C:/Users/Magdalena/Documents/mgr/magister/renv/library/R-4.0/x86_64-w64-mingw32")
remotes::install_version("rstan","2.21.2",lib="C:/Users/Magdalena/Documents/mgr/magister/renv/library/R-4.0/x86_64-w64-mingw32")
remove("rstan")
remove.packages("rstan")
library("rstan", lib.loc="C:/Users/Magdalena/Documents/mgr/magister/renv/library/R-4.0/x86_64-w64-mingw32")
remotes::install_version("rstan","2.21.2",lib="C:/Users/Magdalena/Documents/mgr/magister/renv/library/R-4.0/x86_64-w64-mingw32")
remove.packages("rstan")
library("rstan", lib.loc="C:/Users/Magdalena/Documents/mgr/magister/renv/library/R-4.0/x86_64-w64-mingw32")
options(mc.cores = parallel::detectCores())
ABC_stan<-rstan::stan_model(file="C:/Users/Magdalena/Documents/mgr/magister/fixEf.stan")
remotes::install_version("rstan","2.21.2",lib="C:/Users/Magdalena/Documents/mgr/magister/renv/library/R-4.0/x86_64-w64-mingw32")
remove.packages("rstan")
?stan_model
library("rstan", lib.loc="C:/Users/Magdalena/Documents/mgr/magister/renv/library/R-4.0/x86_64-w64-mingw32")
ABC_stan<-rstan::stan_model(file="C:/Users/Magdalena/Documents/mgr/magister/fixEf.stan")
A_stan<-rstan::stan_model(file="C:/Users/Magdalena/Documents/mgr/magister/hdx_fixEf.stan")
ABC_stan<-stan_model(file="C:/Users/Magdalena/Documents/mgr/magister/fixEf.stan")
renv::restore()
prepare_data = function(data){
data %>%
mutate(id = as.numeric(stringr::str_remove(id, " ")))
}
deuteros = function(data, significance_level = 0.05) {
States = unique(data$State)
aic = loglik = Test_statistic = p_value = NA
model = lm(Mass ~ Exposure*State, data = data)
model_reduced = lm(Mass ~ Exposure, data = data)
result = anova(model, model_reduced)
aic= AIC(model)
loglik = as.numeric(logLik(model))
F_statistic = result$`F`[2]
p_value = result$`Pr(>F)`[2]
data.table::data.table(Test = "Deuteros lm",
State_1 = States[1],
State_2 = States[2],
Test_statistic = F_statistic,
P_value = p_value,
Significant_difference = (p_value <= significance_level),
AIC = aic,
logLik = loglik)
}
semiparametric5 <- function(data, significance_level = 0.05) {
States = unique(data$State)
aic = loglik = Test_statistic = p_value = NA
model_reduced <- gam(Mass ~ s(Exposure) + Exposure,
data=data,
method="REML")
model <- gam(Mass~s(Exposure) + Exposure*State,
data = data,
method="REML")
result = anova.gam(model, model_reduced, test = "Chisq")
aic = AIC(model)
Test_statistic = result$Deviance[2]
p_value = result$`Pr(>Chi)`[2]
loglik = as.numeric(logLik(model))
data.frame(Test = "semiparametric interaction",
State_1 = States[1],
State_2 = States[2],
Test_statistic = Test_statistic,
P_value = p_value,
Significant_difference = (p_value <= significance_level),
AIC = aic,
logLik = loglik)
}
devtools::intsll_github(hadexversum/powerHDX)
devtools::intall_github(hadexversum/powerHDX)
devtools::install_github(hadexversum/powerHDX)
devtools::install_github("hadexversum/powerHDX")
devtools::install_github("hadexversum/powerHDX")
